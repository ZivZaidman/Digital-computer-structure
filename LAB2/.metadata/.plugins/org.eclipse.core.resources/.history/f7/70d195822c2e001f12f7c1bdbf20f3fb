#include  "api.h"         // private library - API layer
#include  "app.h"         // private library - APP layer

enum FSMstate state;
enum SYSmode lpm_mode;
int  seconds0 = 0x30;
int  seconds1 = 0x30;
int  minutes0 = 0x30;
int  minutes1 = 0x30;
char str1[]={0x4C,0x69,0x66,0x65,0x20,0x69,0x73,0x6E,0x27,0x74,0x20,0x61,0x62,0x6F,0x75,0x74};
char str3[]={0x4C,0x69,0x66,0x65,0x20,0x69,0x73,0x20,0x61,0x62,0x6F,0x75,0x74};
char str2[]={0x66,0x69,0x6E,0x64,0x69,0x6E,0x67,0x20,0x79,0x6F,0x75,0x72,0x73,0x65,0x6C,0x66};
char str4[]={0x63,0x72,0x65,0x61,0x74,0x69,0x6E,0x67,0x20,0x79,0x6F,0x75,0x72,0x73,0x65,0x6C,0x66};
//char strings[]={str1,str2,str3,str4};

void main(void){

  state = state0;  // start in idle state on RESET
  lpm_mode = mode0;     // start in idle state on RESET
  sysConfig();
  lcd_init();
  lcd_clear();


  while(1){
    switch(state){
      case state0: //idle
          enterLPM(mode0);
          break;
      case state1:
          lcd_cmd(0x01);
          enable_interrupts();        
          state1Func();
          break;
      case state2://Seconds Counter
          state1TimerOff();
          lcd_cmd(0x01); //clear_LCD
          enable_interrupts();
          state2Func();
          break;
      case state3://ADC converter
          state1TimerOff();
          lcd_cmd(0x01); //Return courser to start
          enable_interrupts();
          state3Func();
          break;
      case state4:
          TIMER0_A0_config();
          state1TimerOff();
          lcd_cmd(0x01); //Return courser to start
          state4Func();
    }
  }
}

