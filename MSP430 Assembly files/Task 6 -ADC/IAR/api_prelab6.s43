#include  "bsp.h"


Lcd_data     MACRO char
             push   #delay5ms
             call   #delay
             mov.b  #0,LCDsDataArrPort
             bis.b  #LCDrs,LCDsControlArrPort
             mov.b  char,LCDsDataArrPort
             call   #Lcd_strobe
             bic.b  #LCDrs,LCDsControlArrPort
             ENDM
             
             
             
Lcd_cmd      MACRO  command
             push   #delay15ms
             call   #delay
             mov.b  command,LCDsDataArrPort
             call   #Lcd_strobe
             ENDM             
             
             

             MODULE API
             PUBLIC checkSignal,checkSignal,AvgVolt,DIV10bit,state3Func
             EXTERN delay,state,Lcd_strobe,Capture,sampleMEM,epsilon,signalstate,signalstateOld,state0,ST_1_CONF,z2d_counter,zd_counter,ADC10con1,check_counter
             EXTERN PWM,TRI,check_counter,sampleCounter,AVG,ADC10con2,ADC10con3
             
             ORG      DataSegStart
             
             RSEG   CODE
;-------------------------------------------------------------
;             check Distance
;-------------------------------------------------------------
closeToEpsilon pop R4 ;PC
               pop R10 ;Num1
               pop R11 ;Num2
               push R4 ;PC
               sub R11,R10
               bit #0x8000, R10
               jz isPos
isNeg          xor #0xFFFF,R10
               add #1,R10
isPos          cmp epsilon,R10
               jn  close
               bic.b #2,SR ;if not close zero bit is 0 
               jmp notClose
close          bis.b #2,SR
notClose       ret

;-------------------------------------------------------------
;             Printin
;-------------------------------------------------------------
PrintLCD      cmp  signalstate,signalstateOld
              jz NoChange
              Lcd_cmd  #0x01
              Lcd_cmd  #0x02
              Lcd_data #'S'
              Lcd_data #'i'
              Lcd_data #'g'
              Lcd_data #'n'
              Lcd_data #'a'
              Lcd_data #'l'
              Lcd_data #':'
              Lcd_cmd #0xC0
              cmp #1,signalstate
              JNZ PrintTri
              Lcd_data #'P'
              Lcd_data #'W'
              Lcd_data #'M'
PrintTri      cmp #3,signalstate
              JNZ PrintSin
              Lcd_data #'T'
              Lcd_data #'r'
              Lcd_data #'i'              
PrintSin      cmp #2,signalstate
              JNZ NoChange
              Lcd_data #'S'
              Lcd_data #'i'
              Lcd_data #'n'
NoChange      mov signalstate,signalstateOld
              ret              
              
              
              
              
PrintVolltage mov   #3, R12  
              pop   R6
              Lcd_cmd  #0x01
              Lcd_cmd  #0x02
              Lcd_data #'V'
              Lcd_data #'a'
              Lcd_data #'v'
              Lcd_data #'g'
              Lcd_data #'='
              Lcd_data #' '
              ;Lcd_cmd #0xC0                            
              POP   R7
              add #0x30, R7
              Lcd_data R7
              dec R12
              Lcd_data #'.'
printingLoop  POP   R7
              add #0x30, R7
              Lcd_data R7
              dec R12
              jnz printingLoop
              Lcd_data #'['  
              Lcd_data #'v'
              Lcd_data #']'
              PUSH R6
              ret
;-------------------------------------------------------------
;             check_Signals 
;-------------------------------------------------------------
checkSignal   call    #ST_1_CONF
sample_again  call    #cal_deriv      ;check derivative
keep_sample   call    #ADC10con1
              clr     zd_counter
              clr     z2d_counter
              jmp     checkSignal
              ret
;------------------------
;calculate derivitve
;------------------------
cal_deriv     mov     sampleMEM,R6       ;calculate 32 derivatives
              mov     R6,R7
              add     #2, R7
              mov     #32,R10
deriv_calc    sub     @R7,0(R6)
              incd    R6
              incd    R7
              dec     R10
              jnz     deriv_calc
              
deriv_check   mov     sampleMEM,R6
              mov     #32,R12
deriv_Loop    dec     R12
              jn      finish_deriv_check
              push    @R6+
              push    #0
              call    #closeToEpsilon
              JNZ     deriv_Loop
              inc     zd_counter
              jmp     deriv_Loop
finish_deriv_check                 
              cmp     #28,zd_counter
              jge     IsPWM
              
cal_2deriv    mov     sampleMEM,R6       
              mov     R6,R7
              add     #2, R7
              mov     #31,R10
deriv2_calc   sub     @R7,0(R6)
              incd    R6
              incd    R7
              dec     R10
              jnz     deriv2_calc
               

deriv2_check  mov     sampleMEM,R6
              mov     #31,R12
deriv2_Loop   dec     R12
              jn      finish_deriv2_check
              push    @R6+
              push    #0
              call    #closeToEpsilon
              JNZ     deriv2_Loop
              inc     z2d_counter
              jmp     deriv2_Loop
finish_deriv2_check                               
              cmp     #24,z2d_counter
              jge     IsTri
              jmp     IsSIN

IsTri          inc  TRI
               dec  check_counter
               jz   PrintSignal
               ret
IsPWM          inc  PWM
               dec  check_counter
               jz   PrintSignal
               ret
IsSIN          dec  check_counter
               jz   PrintSignal
               ret            

PrintSignal    cmp  #7,PWM
               jlo  checkTRI
               mov  #1, signalstate
               jmp  printFinish
checkTRI       cmp  #7,TRI
               jlo  changeSIN
               mov  #3, signalstate
               jmp  printFinish
changeSIN      mov  #2, signalstate
printFinish    mov  #10, check_counter
               mov  #0, PWM
               mov  #0, TRI
               call #PrintLCD
               ret
;------------------------------------------------------------
;              messure avg voltage
;------------------------------------------------------------
AvgVolt                                                           ; return TOS to where ever it was
               call    #ST_1_CONF
onehundredcounter
               dec     sampleCounter
               jz      div100 
               mov     #30,R10
               mov     sampleMEM, R8
               clr     R12
AddingLoop     dec     R10
               jn      GottheLILsum               
               add     @R8+,R12
               jmp     AddingLoop
GottheLILsum   push    R12
               call    #DIV3bit
               call    #DIV10bit
GottheLILavg   pop     R12
               ;pop     R10
               pop     R10
               add     R12,AVG
               call    #ADC10con2
               jmp     AvgVolt

div100         mov    AVG,R12
               push   R12
               call   #DIV10bit
               call   #DIV10bit
               pop    R12
               pop    R10
               pop    R10
               push   R12
Gottheavg      call   #DIV3bit
               call   #DIV10bit
               call   #DIV10bit
               ;call   #DIV10bit
               call   #PrintVolltage
               mov    #0, state
               ;pop    R7
;               mov    #state0,0(SP)
               ret                              
               
;-------------------------------------------------------------------------------
;      state3
;-------------------------------------------------------------------------------               
state3Func     
sampleloop     call #ST_1_CONF
               mov ADC10MEM, R5
               mov  #4, R8
Waitingloop    call #ST_1_CONF
               dec R8
               jnz Waitingloop
               call #ST_1_CONF
               mov ADC10MEM, R6
               cmp R6,R5
               jge  dontswitch               
               mov R6,R7
               mov R5,R6
               mov R7,R5
dontswitch     sub R6,R5
               cmp  #0xFF,R5
               jge  positive
               bis.b  #0x10,&P1OUT
               jmp sampleloop 
positive       bic.b  #0x10,&P1OUT       
               jmp sampleloop
               
;-------------------------------------------------------------------------------
;      16x16 Unsigned Divider: 
;      Quotient = Divided/Divisor , Remainder=Divided/Divisor
;-------------------------------------------------------------------------------
DIV10bit        pop     R14               ;Divisor=10,R8=Divided;Remaider=R10;Q=R13
                mov     #17,R9            ;
                clr     R13                ; Quotient register
                pop     R4        ; Devided registers is R5,R4
                clr     R5            ;clr remainder
                mov.w   #10,R6        ; Divisor registers is R6
                
DIVLOOP1        rla     R13
DIVLOOP2        dec     R9
                jz      DIVLOOP3
                rla     R4          ;whole part
                rlc     R5          ;reminder
                cmp     R6,R5       
                jlo     DIVLOOP1              
                sub     R6,R5
                setc
                rlc     R13
                jmp     DIVLOOP2
                
DIVLOOP3        push    R5
                push    R13
                push    R14
                ret                
;-------------------------------------------------------------------------------
;      divider by 3
;-------------------------------------------------------------------------------
DIV3bit         pop     R14               ;Divisor=10,R8=Divided;Remaider=R10;Q=R13
                mov     #17,R9            ;
                clr     R13                ; Quotient register
                pop     R4        ; Devided registers is R5,R4
                clr     R5            ;clr remainder
                mov.w   #3,R6        ; Divisor registers is R6
                
DIV3LOOP1       rla     R13
DIV3LOOP2       dec     R9
                jz      DIV3LOOP3
                rla     R4          ;whole part
                rlc     R5          ;reminder
                cmp     R6,R5       
                jlo     DIV3LOOP1              
                sub     R6,R5
                setc
                rlc     R13
                jmp     DIV3LOOP2
                
DIV3LOOP3       push    R13
                push    R14
                ret


;------------------------------------------------------------
             ENDMOD    
             END