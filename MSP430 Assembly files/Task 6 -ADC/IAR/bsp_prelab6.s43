#include  "bsp.h"



Lcd_cmd      MACRO  command
             push   #delay15ms
             call   #delay
             mov.b  command,LCDsDataArrPort
             call   #Lcd_strobe
             ENDM
             
             
             
             
            MODULE BSP
            PUBLIC GPIOconfig,Timerconfig,ADCconfig,LCDsconfig,ADC10con1,ST_1_CONF,ADC10con2,ADC10con3
            EXTERN main,PBs_handler,delay,Lcd_strobe,TIMER0_ISR,TIMER1_ISR,ADC10_ISR,sampleMEM
            
            RSEG   CODE             
            
;-----------------------------------------------------------------------------  
;           GPIO congiguration
;-----------------------------------------------------------------------------
GPIOconfig 
            /* mov.w   #WDTPW+WDTHOLD,&WDTCTL   ; hold watchdog timer
            ; PushButtons Setup
             bic.b   #0x17,PBsArrPortSel
             bis.b   #0xE8,PBsArrPortSel
             bic.b   #0x7,PBsArrPortDir
             bis.b   #0xF8,PBsArrPortDir    ;p2.2 set foe OUTPUT to test state2
             bis.b   #0x3,PBsArrIntEdgeSel ; pull-up
             bic.b   #0x4,PBsArrIntEdgeSel ; pull-down
             bis.b   #0x7,PBsArrIntEn
             bic.b   #0xF,PBsArrIntPend    ; clear pending interrupts
             ret*/
 mov.w   #WDTPW+WDTHOLD,&WDTCTL   ; hold watchdog timer
            ; PushButtons Setup
             bic.b   #0x17,PBsArrPortSel
             bic.b   #0x17,PBsArrPortDir
             bis.b   #0xF0,PBsArrPortDir    ;p2.2 set foe OUTPUT to test state2
             bis.b   #0x3,PBsArrIntEdgeSel ; pull-up
             bic.b   #0x4,PBsArrIntEdgeSel ; pull-down
             bis.b   #0x7,PBsArrIntEn
             bic.b   #0xF,PBsArrIntPend    ; clear pending interrupts
             ret             
;------------------------------------------------------------------------------------- 
;            Timers congiguration 
;-------------------------------------------------------------------------------------
Timerconfig 
             bis.w   #TACLR,&TA0CTL
             mov.w   #0xFFFF,&TA0CCR0
A0conf       bis.w   #TASSEL_2+MC_3+ID_3,&TA0CTL          
             bic.w   #TAIFG+TAIE, &TA0CTL
;             bic.w   #TAIFG,TA0CTL

;SetupC0     bis.w   #TACLR,&TA0CTL  
 ;           mov.w   #0xFFFF,&TA0CCR0
;SetupTA0    bis.w   #TASSEL_2+MC_3+ID_3,&TA0CTL ; SMCLK, up DOWN mode
;            bic.w   #TAIE,&TA0CTL
           // bic.w   #TAIFG,&TA0CTL


CA11conf     bis.b   #0x4, &P2SEL      
             bic.b   #0x4, &P2DIR
             bis     #CM_3+CAP+CCIS_2,Timer1CCTL1
A1conf       bis     #TASSEL_2+MC_2,&Timer1Control
             bic.w   #TAIFG+TimerCCIE, &Timer1Control


ret
;-------------------------------------------------------------------------------------- 
;            ADC congiguration 
;--------------------------------------------------------------------------------------
ADCconfig
            nop ; write here ADC congiguration code

            ret
;-------------------------------------------------------------------------------------- 
;            LCDs congiguration 
;--------------------------------------------------------------------------------------
LCDsconfig    bic.b   #0xE0,LCDsControlArrSel     
              bis.b   #0xE0,LCDsControlArrPortDir
              bic.b   #0xFF,LCDsDataArrPortSel     
              bis.b   #0xFF,LCDsDataArrPortDir
              bic.b   #0xFF,PBsArrIntPend 
              bic.b   #0xE0,LCDsControlArrPort     
              push    #delay15ms
              call    #delay                
              mov.b   #0x3F,LCDsDataArrPort       
              call    #Lcd_strobe                 ;;
              push    #delay5ms
              call    #delay
              mov.b   #0x3F,LCDsDataArrPort
              call    #Lcd_strobe               ;;
              push    #delay200us
              call    #delay
              mov.b   #0x3F,LCDsDataArrPort
              call    #Lcd_strobe                 ;;
              Lcd_cmd #0x3C
              Lcd_cmd #0x0F
              Lcd_cmd #0x01
              Lcd_cmd #0x06
              Lcd_cmd #0x80
              Lcd_cmd #0x02    
              
              ret
;-------------------------------------------------------------------------------------- 
;            ADC10 congiguration 
;--------------------------------------------------------------------------------------              
ADC10con3      bic      #ENC,&ADC10CTL0
               mov      #ADC10IE+ADC10ON+ADC10SHT_3,&ADC10CTL0
               mov      #INCH_3+ADC10SSEL_3+ADC10DIV_7,&ADC10CTL1
               ret      



ADC10con2      bic      #ENC,&ADC10CTL0
               mov      #ADC10IE+ADC10ON+MSC+ADC10SHT_2,&ADC10CTL0
               mov      #INCH_3+ADC10DIV_7+CONSEQ_2,&ADC10CTL1
               bic.b    #ADC10CT+ADC10TB,&ADC10DTC0
               mov.b    #30,&ADC10DTC1
               mov      sampleMEM ,&ADC10SA
               ret    
               
               
ADC10con1      bic      #ENC,&ADC10CTL0
               mov      #ADC10IE+ADC10ON+MSC+ADC10SHT_2,&ADC10CTL0
               mov      #INCH_3+ADC10DIV_0+CONSEQ_2,&ADC10CTL1
               bic.b    #ADC10CT+ADC10TB,&ADC10DTC0
               mov.b    #33,&ADC10DTC1
               mov      sampleMEM ,&ADC10SA
               ret

            
ST_1_CONF      bis      #ENC+ADC10SC,&ADC10CTL0 ;Enable conversion 
               bis      #ISSH, &ADC10CTL1 ; Invert Sample Hold Signal
               bis      #CPUOFF+GIE,SR            
               ret                              
;---------------------------------------------------------------------------------------                  
             COMMON  INTVEC   ; Interrupt Vectors-Begins a common segment name of INTVEC 
;--------------------------------------------------------------------------------------
             ORG     RESET_VECTOR       ; MSP430 RESET Vector
             DW      main  
             ORG     TIMER0_A0_VECTOR
             DW      TIMER0_ISR
             ORG     TIMER1_A1_VECTOR
             DW      TIMER1_ISR             
             ORG     PORT1_VECTOR       ;PORT2 Interrupt Vector
             DW      PBs_handler        ; interrupt handler = ISR
             ORG     ADC10_VECTOR            ; ADC10 Vector
             DW      ADC10_ISR

            
             ENDMOD
             END
